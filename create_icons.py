# FILE: create_icons.py (REPLACE the content of this file)

import os
import re

# --- CONFIGURATION: PLEASE UPDATE THESE TWO PATHS ---

# 1. UPDATED: The folder where your purchased SVG icons are located.
SOURCE_SVG_DIRECTORY = r"C:\Users\shop\Desktop\icd"

# 2. The folder where the new .tsx React components will be created.
OUTPUT_TSX_DIRECTORY = r"src\components\icons"

# --- END OF CONFIGURATION ---


def clean_filename_to_component_name(filename):
    """Converts an SVG filename into a PascalCase React component name."""
    # Remove the .svg extension
    name_without_extension = filename.replace('.svg', '')
    # Take the primary name (before the first comma)
    primary_name = name_without_extension.split(',')[0]
    # Remove any non-alphanumeric characters (except spaces)
    cleaned_name = re.sub(r'[^a-zA-Z0-9\s]', '', primary_name)
    # Convert to PascalCase (e.g., "Location Pin" -> "LocationPin")
    pascal_case_name = ''.join(word.capitalize() for word in cleaned_name.split())
    return f"{pascal_case_name}Icon"

def extract_svg_details(svg_filepath):
    """Extracts the inner content and viewBox from an SVG file."""
    try:
        with open(svg_filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Find viewBox using regex
            viewbox_match = re.search(r'<svg[^>]*viewBox="([^"]+)"', content)
            viewbox = viewbox_match.group(1) if viewbox_match else "0 0 24 24"

            # Find the inner content of the SVG
            inner_content_match = re.search(r'<svg[^>]*>(.*?)<\/svg>', content, re.DOTALL)
            if inner_content_match:
                inner_content = inner_content_match.group(1).strip()
                # Clean up comments and other tags we don't want
                inner_content = re.sub(r'', '', inner_content)
                inner_content = re.sub(r'<g[^>]*>', '', inner_content)
                inner_content = re.sub(r'<\/g>', '', inner_content).strip()
                return inner_content, viewbox
    except Exception as e:
        print(f"  - Could not process {os.path.basename(svg_filepath)}: {e}")
    return None, None

def create_react_component(component_name, svg_content, view_box):
    """Generates the content for the .tsx React component file."""
    return f"""
// Auto-generated by create_icons.py
import React from 'react';

export const {component_name} = (props: React.SVGProps<SVGSVGElement>) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    fill="currentColor"
    viewBox="{view_box}"
    {{...props}}
  >
    {svg_content}
  </svg>
);
"""

def main():
    """Main script execution."""
    print(f"Starting icon generation...")
    print(f"Source: {SOURCE_SVG_DIRECTORY}")
    print(f"Output: {OUTPUT_TSX_DIRECTORY}")

    if not os.path.isdir(SOURCE_SVG_DIRECTORY):
        print("\nERROR: Source directory not found. Please check the `SOURCE_SVG_DIRECTORY` path.")
        return

    os.makedirs(OUTPUT_TSX_DIRECTORY, exist_ok=True)
    
    component_names = []

    for filename in os.listdir(SOURCE_SVG_DIRECTORY):
        if filename.endswith('.svg'):
            component_name = clean_filename_to_component_name(filename)
            component_names.append(component_name)
            
            svg_filepath = os.path.join(SOURCE_SVG_DIRECTORY, filename)
            inner_content, view_box = extract_svg_details(svg_filepath)

            if inner_content:
                tsx_content = create_react_component(component_name, inner_content, view_box)
                output_filepath = os.path.join(OUTPUT_TSX_DIRECTORY, f"{component_name}.tsx")
                
                with open(output_filepath, 'w', encoding='utf-8') as f:
                    f.write(tsx_content)
                print(f"- Created {component_name}.tsx")

    # Create the barrel file (index.ts)
    if component_names:
        component_names.sort()
        index_content = "\\n".join(f"export * from './{name}';" for name in component_names)
        index_filepath = os.path.join(OUTPUT_TSX_DIRECTORY, 'index.ts')
        with open(index_filepath, 'w', encoding='utf-8') as f:
            f.write(index_content)
        print("\n- Created index.ts barrel file.")
    
    print("\nIcon generation complete! âœ¨")

if __name__ == "__main__":
    main()